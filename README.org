#+TITLE: .emacs.d

* TODOS
** Cutomization [0/2]
   + [-] add function to add multiple hooks
   + [ ] Speeeeed up startup time
** PDF [1/1]
   + [X] add pdf vim keybindings
** org-mode
*** functions [0/5]
   + [-] org+roam
   + [ ] diplay remote images
   + [ ] [[https://github.com/astahlman/ob-async][ob-async]]
   + [ ] [[https://github.com/snosov1/toc-org][toc-org]]
   + [ ] [[https://github.com/abo-abo/org-download][org-download]]
*** Inputs [0/2]
   + [ ] bracket pair
   + [ ] snippet
** programming [1/2]
   + [X] lisp
** Status Bar
- [ ] logo?
- [ ] hide minor mode
* Refs
** dropdown terminal
#+begin_src elisp
;; Emulation of 'scratchpad' in i3
;; s-s / s-e to toggle or create side window for placing shell/eshell
;; C-u s-s / C-u s-e to create new shell/eshell buffer and SPC z r to give a mnemonic name to it.
;; In a shell, C-o to switch to other shells
(defun arche/switch-to-buffer-same-major-mode ()
  "Using completing-read, switch to other buffers with the same major-mode"
  (interactive)
  (let ((buffers
	 (-filter
	  (lambda (buf)
	    (equal (with-current-buffer buf major-mode) major-mode))
	  (buffer-list))))
    (unless (< (length buffers) 2)
      (switch-to-buffer (completing-read
			 "Select buffer: "
			 (cl-remove (buffer-name) (mapcar #'buffer-name buffers)))))))


(defun arche/toggle-window-with-major-mode (&optional major-mode-to-toggle raise-win-fn)
  "Toggle windows with specific major-mode in current frame. This
function is mainly written for major-modes of inferior
intepreters or shells.

If the argument `major-mode-to-toggle' is not given, choose the
major-mode associated with current buffer.

If no live windows with specified major-mode exist in current
frame, call `raise-win-fn' to open one. Otherwise, close all
lives windows that match specified major-mode.
"
  (interactive)
  (let* ((wl (window-list))
	 (mm (if major-mode-to-toggle major-mode-to-toggle major-mode))
	 (wl-filtered (-filter
		       #'(lambda (win)
			   (equal mm (with-current-buffer (window-buffer win) major-mode)))
		       wl)))
    (pcase (length wl-filtered)
      (0 (and raise-win-fn (funcall raise-win-fn)))
      (t (mapcar #'delete-window wl-filtered)))))

(defun arche/toggle-eshell (&optional arg)
  "Toggle or create eshell buffer.

Without prefix arg, toggle eshell. Otherwise the behavior is the same as `eshell'."
  (interactive)
  (if arg
      (eshell arg)
    (arche/toggle-window-with-major-mode 'eshell-mode #'eshell)))

(global-set-key (kbd "s-e") #'arche/toggle-eshell)

(defun arche/toggle-eshell ()
  (interactive)
  (arche/toggle-window-with-major-mode 'eshell-mode #'eshell))

(defun arche/toggle-shell ()
  (interactive)
  (arche/toggle-window-with-major-mode 'shell-mode #'shell))

(global-set-key (kbd "s-s") #'arche/toggle-shell)

(general-define-key
 :keymaps '(eshell-mode-map shell-mode-map)
 "C-o" #'arche/switch-to-buffer-same-major-mode)
#+end_src
